第八章-函数


#目标 
	描述 C 语言中的函数
	掌握 C 语言中常见的内置函数
	理解函数原型和函数的返回值
	熟练掌握自定义函数的定义和调用
	理解变量的作用域
	理解变量的存储类型
	理解两种参数传递的方式：传值、引用
	熟悉带参函数的调用
	熟练使用数组作为函数参数

为什么使用函数
	函数可以把相对独立的某个功能抽象出来，使之成为程序中的一个独立实体。可以在同一个程序或其他程序中多次重复使用


函数机制的优点
	使程序变得更简短而清晰 
	有利于程序维护
	可以提高程序开发的效率 
	提高了代码的重用性 

函数类型
    内置函数（库函数）：
	由Ｃ语言系统提供；
	用户无须定义，也不必在程序中作类型说明；
	只需在程序前包含有该函数定义的头文件;

	 自定义函数：
	用户在程序中根据需要而编写的函数;


常用内置函数



math.h 的
	计算x的平方根  	double sqrt(double x)  

	计算x的y次幂	double pow(double x, double y)

	求不小于x的最小整数，并以double形式显示  double ceil(double x)

	求不大于x的最大整数，并以double形式显示  double floor(double x)


ctype.h的
	如果x为小写字母，则返回对应的大写字母  int toupper(int x)

	如果x为大写字母，则返回对应的小写字母  int tolower(int x)


stdlib.h的
	产生一个随机数 	int rand(void)
	终止程序	void exit(int retval)




函数定义
double max(double x, double y)
{
   double m;
   m=x>y?x:y;
   return m;
}
该函数名为max，它有两个double类型的参数，返回值为double类型。在函数体内有三条语句实现了求两个数中较大的数，并将它返回。

void displayDiscount()
{
	float price, discount_amt;
	printf("请输入价格");
	scanf("%f, &price);
	discount_amt = 0.75 * price;
	printf("折扣额为 %f", discount_amt);
}

该函数名为displayDiscount，无参数，使用void说明无返回值，函数体内的语句用于根据产品的价格求折扣后的价格。


函数原型
函数原型说明在形式上与函数头部类似，最后加一个分号。原型说明中参数表里的参数名可以不写（只写参数类型）。
#include <stdio.h>
float count (int, int);
int main()
{
   . . .
   . . .
}
float count(int x,int y)
{
  . . .
}


函数调用 

#include<stdio.h>
int main()
{
	:::::::::
	set_discount();
	displayDiscount();
	::::::::
	::::::::
}

float set_discount()
{
   ::::::::::
   ::::::::::
}

float displayDiscount()
{
   ::::::::::
   ::::::::::
}



函数嵌套调用 
--从一个函数调用另一个函数称为函数的嵌套调用 

#include<stdio.h>
int main()
{
	:::::::::
	palindrome();
	::::::::
	::::::::
}
void palindrome()
{
   ::::::::
   reverse();
       ::::::::
}

void reverse()
{
   ::::::::::
   ::::::::::
}

函数递归调用 

/* 此函数用于计算 a 的阶乘 */
int factorial(int a) 
{
     if (a == 1)
        return 1;
     else
     {
         a = a * factorial(a-1);
         return a;
     }
}


函数返回值

C 语言中的 return 语句用于向调用函数返回值，语法如下：
             return (<表达式>); 

 C语言中的函数至多可以返回一个值，不能返回多个值；
 返回值的数据类型必须与函数原型中返回值的数据类型匹配；
 当遇到 return 语句时，函数执行将终止。程序控制流将立即返回调用函数；

#小结
	自定义函数是用户在程序中根据需要而编写的函数
	函数的结构包括：返回值类型、函数名、参数列表、函数体
	函数原型说明以便向编译器指出该函数使用什么样的格式和语法
	函数调用时程序控制流将转向被调函数，被调函数执行结束时，控制流返回主调函数
	return 语句用于向调用函数返回值

变量的作用域 4-2
程序中变量也有不同的使用范围，称为变量的作用域。变量的作用域决定变量的可访问性

void displayDiscount()
{
     float discount_amt;
     //局部变量：不能在函数外使用
     . . .
     . . .
     . . .
}


float discount_amt;
//全局变量：可以在整个程序中使用
int main()
{
       . . .
       . . .
}
void displayDiscount()
{
      . . .
      . . .


}


存储类型 2-1

变量的存储方式可分为“静态存储”和“动态存储”两种
静态存储变量是一直存在的，而动态存储变量则时而存在时而消失
这种由于变量存储方式不同而产生的特性称为变量的生存期
生存期表示了变量存在的时间

静态局部变量

静态局部变量生存期为整个源程序
静态局部变量作用域与自动变量相同，即只能在定义该变量的函数内使用该变量
对基本类型的静态局部变量若在说明时未赋以初值，则系统自动赋予0值
函数被调用时，其中的静态局部变量的值将保留前次被调用的结果

静态全局变量与普通全局变量在存储方式上完全相同
	区别在于：非静态全局变量的作用域是整个源程序；而静态全局变量的作用域只是定义它的文件


函数形参和实参
int main()
{	
   . . . 
   . . .
   display (10, 20.5); // 实际参数  函数调用


}

void display(int num, float fraction)  //形式参数

{
    . . .  
    . . .                
}

传值调用    ----不改变原来变量的值
int main()
{
   int a = 0; //初始化a值为0
   func(a); //调用函数func
   printf("%d",a); //输出a的结果
}
//定义函数func
void func(int a)
{
   a = 10; //让参数a等于10
}




引用调用----------取地址  指针 

int main()
{
   int a = 0; //初始化a值为0
   func(&a); //调用函数F
   printf("%d",a); //输出a的结果
}
//定义函数F
void func(int *a)
{
   *a = 10; //让参数a等于10
}


数组作为函数参数
在用数组作实参时，以传址方式调用函数，也就是说把实参数组的首地址赋给形参
实际上形参数组和实参数组为同一数组，共同拥有一段内存空间


总结 2-1


根据变量的作用域可以将变量划分为：局部变量和全局变量
根据变量的存储类型（决定生存期）将变量划分为： 自动变量、寄存器变量、静态变量、外部变量
静态局部变量的生存期为整个源程序，但其作用域为定义该变量的函数
静态全局变量的生存期为整个源程序，其作用域为定义该变量的源文件

总结 2-2
采用传值调用方式时，在被调用函数中改变形参的值，只是改变其副本值，而不会影响调用函数中实参值
采用引用调用方式时，传递的是变量的地址值，这样在被调函数中，对形参的操作实际上操作的是实参本身
数组作为函数传递时，实际采用引用调用方式 


**函数声明一般在main（）外面，全局声明，防止冲突