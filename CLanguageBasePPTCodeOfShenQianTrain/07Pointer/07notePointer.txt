*
*
#指针	=
	简介+
	指针的定义和使用+
	指针的运算+
	指向数组的指针
	
	
##声明并且初始化指针变量
	数据类型 *指针名;
  int *ptrnum;
  char *ptralpha;
	float *rate_ptr;
	double *p, *q;
	
	ptrnum = NULL;
		值为NULL的指针称为空指针，这意味着，指针并不指向任何地址。
		在头文件 <stdio.h> 中，NULL 定义为常量。


##与指针相关的运算符2
	&   取地址符

int num = 100 , *ptrnum;

ptrnum = &num;  //即 ptrnum = num的内存地址

*ptrnum = 100;   //即 *ptrnum = num的值  100



/*
一个数组存储在一块连续内存单元中；数组名就是这块连续内存单元的首地址；
第 (i + 1) 个数组元素的地址可表示为 &data[i] 或 (data+i)。
可以通过以下方式为指向数组的指针赋值：
                  int a[10];
                  pa=&a[0];  // 或者 pa=a;
一个指针变量可以指向一个数组元素
                  int *ptr,data[10];
             ptr=data+3;//或者ptr=&data[3]

*/



##指针的特点
指针变量的命名规则和其他变量的命名规则一样
指针不能与现有变量同名
指针可存放 C 语言中的任何基本数据类型、数组和其他所有高级数据结构的地址
若指针已声明为指向某种类型数据的地址，则它不能用于存储其他类型数据的地址
应为指针指定一个地址后，才能在语句中使用指针，避免出现野指针




总结

指针是一个变量，它存储另一个对象的		内存地址

指针的声明由基本类型、星号 (*) 和变量名组成

为指针赋值，赋值运算符右侧必须是一个地址。		如果是普通变量需要在前面加一个取地址运算符 &；如果是另一个指针变量或者是一个数组，不需要加 &运算符

运算符 * 用于返回指针指向的内存地址中存储的值

指针的算术运算的含义是指针的移动，将指针执行加上或者减去一个整数值n的运算相当于指针向前或向后移动n个数据单元

指针可以执行比较相等的运算，用来判断两个指针是否指向同一个变量

指向数组的指针，存储的是数组中元素的地址。数组data的第 (i + 1) 个元素的地址可表示为 &data[i] 或 (data+i)
