第四章	条件结构

熟练使用多重 if 结构
熟练使用嵌套 if 结构
熟练使用 switch 结构
理解条件运算符的用法


4.2 多重 if 结构

if (表达式1)
	语句1;

else if (表达式2)
	语句2;

else if (表达式3)
	语句3;
.
.
else 
	语句n;

4.3 嵌套 if 结构 2-1

嵌套 if 结构就是将整个 if 块插入另一个 if 块中
if (表达式1) {

	if (表达式2)

		if (表达式3) 
		
			语句;

} else {

	语句;  
}


C语言规定，每个 else 部分总属于前面最近的那个缺少对应的 else 部分的 if 语句。

提倡使用大括号括起来以避免看起来有二义性。


4.4 switch 结构 3-1
4.4 switch 结构 3-2

switch (表达式)
{
      case 常量 1:
		语句;
		break;

      case 常量 2:
		语句;
		break;
	
	default:
		语句;
}
在使用switch结构时应注意以下几点：
在case后的各常量表达式的值不能相同，否则会出现错误；
在case后，允许有多个语句，可以不用{}括起来；
每个case语句后都必须有一个break语句，否则会出现错误；
各case和default子句的先后顺序可以变动，而不会影响程序执行结果；
default子句可以省略；



1. 比较少见的用法是，为了执行某个case的代码后继续执行下一个case的代码，故意省略break语句。2. 一个普遍的误解：以为程序只会执行匹配的case标号相关联的语句。实际上，程序从该点开始执行，并跨越case边界继续执行其他语句，直到switch结束或遇到break语句为止。3. switch内部的变量定义：对于switch结构，只能在它的最后一个case标号或default标号后面定义变量，制定这个规则是为了避免出现代码跳过变量的定义和初始化的情况。回顾变量的作用域，变量从它的定义点开始有效，直到它所在块结束为止。在这种情况下，如果要为某个特殊的case定义变量，则可以引入块语句，在该语句中定义变量，从而保证这个变量在使用前被定义和初始化。case true;    { // ok:declaration statement within a statement block int i=0; // …    }    break;case false;        // … 




4.5 比较多重 if 和 switch 结构


 多重if结构和switch结构都可以用来实现多路分支；

多重if结构用来实现两路、三路分支比较方便，而switch结构实现三路以上分支比较方便；

在使用switch结构时，应注意分支条件要求是整型表达式，而且case语句后面必须是常量表达式；

有些问题只能使用多重if结构来实现，例如要判断一个值是否处在某个区间的情况。



4.6 条件运算符示例

value = num > 100 ? ‘y’ : ‘n’;

> 100    value = 'y'
否则  = 'n'



总结
多重if结构就是在主if块的else部分中还包含其他if块
嵌套if结构是在主if块中还包含另一个if 语句
C语言规定，嵌套if结构中每个else部分总是属于前面最近的那个缺少对应的else部分的if语句
switch结构也可以用于多分支选择。用于分支条件是整型表达式，而且判断该整型表达式的值是否等于某些值（可以罗列的），然后根据不同的情况，执行不同的操作
条件运算符是 if–else 语句的另一种表现形式
